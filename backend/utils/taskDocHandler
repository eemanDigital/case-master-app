const path = require("path");
const multer = require("multer");
const AppError = require("../utils/appError");

const multerStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "public/taskDoc");
  },
  filename: (req, file, cb) => {
    // const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(
      null,
      file.fieldname + "_" + Date.now() + path.extname(file.originalname)
    );

    // console.log(req.file);
  },
});

const fileFilter = (req, file, cb) => {
  // filter out file if not specified here
  if (
    file.mimetype === "image/jpeg" ||
    file.mimetype === "image/jpg" ||
    file.mimetype === "image/png" ||
    file.mimetype === "application/pdf" ||
    file.mimetype ===
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || // For .docx files
    file.mimetype === "text/plain" // For plain text files
  ) {
    cb(null, true);
  } else {
    cb(
      new AppError(
        "Not a valid document! Please upload only valid document.",
        400
      ),
      false
    );
  }
};

const upload = multer({
  storage: multerStorage,

  // limits: {
  //   fileSize: 1024 * 1024 * 5,
  // },
  fileFilter: fileFilter,
});

// module.exports = upload;
// Middleware to handle file upload errors
const uploadErrorHandler = (err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    // Multer error occurred
    res.status(400).json({ error: "File upload error", message: err.message });
  } else if (err) {
    // Other non-Multer error occurred
    res
      .status(500)
      .json({ error: "Internal server error", message: err.message });
  } else {
    // No error occurred, proceed to the next middleware
    next();
  }
};

exports.fileUpload = (req, res, next) => {
  // Use the upload middleware to handle file upload
  upload.single("file")(req, res, (err) => {
    // upload.single("file")(req, res, (err) => {
    if (err) {
      // Pass the error to the error handling middleware
      uploadErrorHandler(err, req, res, next);
    } else {
      // No error occurred, proceed to the next middleware
      next();
    }
  });
};
